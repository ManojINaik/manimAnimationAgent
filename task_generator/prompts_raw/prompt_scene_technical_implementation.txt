You are an expert in educational video production and Manim (Community Edition), adept at translating pedagogical narration plans into robust and spatially accurate Manim code.  
**Reminder:** This technical implementation plan is fully self-contained. There is no dependency on the implementation from any previous or subsequent scenes.

Create a detailed technical implementation plan for Scene {scene_number} (Manim code focused), *informed by the provided Manim documentation context*, strictly adhering to defined spatial constraints (safe area margins: 0.5 units, minimum spacing: 0.3 units), and **addressing potential text bounding box overflow issues**.

Topic: {topic}
Description: {description}

Scene Overview:
{scene_outline}

Scene Vision and Storyboard:
{scene_vision_storyboard}

The following manim plugins are relevant to the scene:
{relevant_plugins}

**Spatial Constraints (Strictly Enforced):**
*   **Safe area margins:** 0.5 units on all sides from the scene edges.  All objects must be positioned within these margins.
*   **Minimum spacing:** 0.3 units between any two Manim objects (measured edge to edge). This prevents overlaps and maintains visual clarity.

**üö® CRITICAL POSITIONING REQUIREMENTS - NO HARDCODED COORDINATES! üö®**

1. **All positioning MUST use relative methods:**
   - ‚úÖ CORRECT - Use these methods:
     ```python
     obj2.next_to(obj1, RIGHT, buff=1)
     obj3.align_to(obj2, UP)
     obj4.to_edge(LEFT, buff=0.5)  # Relative to scene edge
     obj5.to_corner(UR, buff=0.5)  # Upper right corner
     ```
   - ‚ùå WRONG - Never use these:
     ```python
     obj.move_to([-2, -1, 0])  # NO hardcoded coordinates!
     obj.shift(RIGHT * 2)      # NO arbitrary shifts!
     camera.move_to([1, 1, 0]) # NO absolute camera positions!
     ```

2. **Relative Positioning Hierarchy:**
   - Start from ORIGIN or scene edges (UP, DOWN, LEFT, RIGHT)
   - Position each new object relative to existing ones
   - Use VGroups to maintain relative positions during animations

3. **Spacing and Buffers:**
   - Always specify explicit `buff` values (minimum 0.3)
   - Use transition buffers (`Wait` times) between sub-scenes
   - Maintain safe area margins (0.5 units from edges)

3. **Spatial Positioning Strategy**:
    - **ABSOLUTELY NO HARDCODED COORDINATES OR ARBITRARY SHIFTS!**
    - **Mandate these relative positioning methods ONLY:**
        - `next_to(ref_obj, direction, buff=...)` - Position relative to another object
        - `align_to(ref_obj, direction)` - Align with another object
        - `to_edge(direction, buff=...)` - Position relative to scene edge
        - `to_corner(direction, buff=...)` - Position in scene corner
        - `arrange(direction, buff=...)` - For VGroups
    - **For EVERY object, you MUST specify:**
        - Which object it's positioned relative to (or scene edge/ORIGIN)
        - Which relative positioning method is used
        - Explicit `buff` value (minimum 0.3 units)
    - **Positioning Sequence:**
        1. Start from ORIGIN or scene edges
        2. Position each new object relative to existing ones
        3. Use VGroups to maintain relative positions
        4. Add visual checkpoints to verify margins and spacing
    - **Text Safety:**
        - Account for text bounding boxes in spacing
        - Use recommended font sizes to prevent overflow
        - Break long text into multiple lines

    **üö® Camera Movement Guidelines - NO HARDCODED POSITIONS! üö®**
    - ‚úÖ CORRECT - Use relative camera movements:
      ```python
      # Move camera to focus on an object
      self.play(self.camera.frame.animate.move_to(target_object.get_center()))
      
      # Zoom to show detail
      self.play(self.camera.frame.animate.scale(0.5))
      
      # Pan to follow a path
      self.play(self.camera.frame.animate.move_to(path.get_end()))
      ```
    - ‚ùå WRONG - Never use absolute coordinates:
      ```python
      self.camera.frame.move_to([-2, -1, 0])  # NO!
      camera_location = [1, 1, 0]             # NO!
      self.play(self.camera.frame.animate.move_to(camera_location))  # NO!
      ```

4. **Animation Methods & Object Lifecycle Management**:
    - Define clear animation sequences using documented methods such as `Create`, `Write`, `FadeIn`, `Transform`, and corresponding removal animations (`FadeOut`, `Uncreate`). Include animation methods from plugins if they are used.
    - For each animation, specify parameters like `run_time`, `lag_ratio`, and the use of `Wait()` for transition buffers.
    - Ensure every object's appearance and removal is managed to prevent clutter and maintain scene clarity.
    
5. **Code Structure & Reusability**:
    - Propose modular functions for creating and animating common objects to promote code reusability.
    - Organize the overall code structure into logical sections: dependencies, object definitions, individual layout stages, and the main `construct` method.
    - Include inline comments to document the rationale for configuration choices, referencing the Manim Documentation *and the plugin documentation where applicable*.
    
***Mandatory Safety Checks***:
    - **Safe Area Enforcement**: All objects, including text bounding boxes, must remain within 0.5 unit margins.
    - **Minimum Spacing Validation**: Confirm a minimum of 0.3 units spacing between every pair of objects.
    - **Transition Buffers**: Use explicit `Wait()` calls to separate animation steps and sub-scenes.

You MUST generate the technical implementation plan for the scene in the following format (from ```xml to </SCENE_TECHNICAL_IMPLEMENTATION_PLAN>```):

```xml
<SCENE_TECHNICAL_IMPLEMENTATION_PLAN>
0. **Dependencies**:
    - **Manim API Version**: Target the latest stable Manim release, using only documented API elements.
    - **Allowed Imports**: `manim`, `numpy`, and any explicitly approved and documented Manim plugins.  No external assets (e.g., images, audio, or video files) are allowed, but established Manim plugins are permitted.
    
1. **Manim Object Selection & Configuration (Text and Shapes)**:
    - Clearly define the Manim objects (e.g., `Tex`, `MathTex`, `Circle`, `Line`, etc.) used to construct the scene.  Also include any objects provided by used plugins.
    - Specify all key parameters such as text content, font size, color, stroke, or shape dimensions.
    - **Text Considerations**:
        - **Use `MathTex` for mathematical expressions and equations, ensuring valid LaTeX syntax.** For example: `MathTex("x^2 + y^2 = r^2")`.
        - **Use `Tex` for all non-mathematical text, including titles, labels, explanations, and general text.** For example: `Tex("This is a circle")`.
        - **If you need to include regular text *within* a `MathTex` environment (e.g., for explanations alongside a formula), use the `\\text{{}}` command.** For example: `MathTex(r"\\text{{Area of circle}} = \\pi r^2")`.
        - **Do not use `MathTex` for regular text, as it will result in incorrect spacing and formatting.**
        - **LaTeX Packages**: If any `Tex` or `MathTex` objects require LaTeX packages beyond those included in Manim's default template, specify them here.  For example: "Requires: `\\usepackage{{amssymb}}`".  Create a `TexTemplate` object and add the necessary packages using `add_to_preamble()`.
        - **Font Size Recommendations**:
            - If there is title text, font size is highly recommended to be 28.
            - If there are side labels or formulas, font size is highly recommended to be 24.
            - However, if the text has more than 10 words, the font size should be reduced further and multiple lines should be used.
    - Confirm all objects begin within the safe area (0.5 units from all edges) and maintain at least 0.3 units spacing to avoid overlaps.
    
2. **VGroup Structure & Hierarchy**:
    - Organize related elements into `VGroup`s for efficient spatial and animation management.  If a plugin provides a specialized group-like object, consider using it.
    - For each `VGroup`, define the parent-child relationships and ensure internal spacing of at least 0.3 units.
    - Clearly document the purpose for each grouping (e.g., "formula_group" for mathematical expressions).
    
3. **Spatial Positioning Strategy**:
    - **ABSOLUTELY NO HARDCODED COORDINATES OR ARBITRARY SHIFTS!**
    - **Mandate these relative positioning methods ONLY:**
        - `next_to(ref_obj, direction, buff=...)` - Position relative to another object
        - `align_to(ref_obj, direction)` - Align with another object
        - `to_edge(direction, buff=...)` - Position relative to scene edge
        - `to_corner(direction, buff=...)` - Position in scene corner
        - `arrange(direction, buff=...)` - For VGroups
    - **For EVERY object, you MUST specify:**
        - Which object it's positioned relative to (or scene edge/ORIGIN)
        - Which relative positioning method is used
        - Explicit `buff` value (minimum 0.3 units)
    - **Positioning Sequence:**
        1. Start from ORIGIN or scene edges
        2. Position each new object relative to existing ones
        3. Use VGroups to maintain relative positions
        4. Add visual checkpoints to verify margins and spacing
    - **Text Safety:**
        - Account for text bounding boxes in spacing
        - Use recommended font sizes to prevent overflow
        - Break long text into multiple lines

    **üö® Camera Movement Guidelines - NO HARDCODED POSITIONS! üö®**
    - ‚úÖ CORRECT - Use relative camera movements:
      ```python
      # Move camera to focus on an object
      self.play(self.camera.frame.animate.move_to(target_object.get_center()))
      
      # Zoom to show detail
      self.play(self.camera.frame.animate.scale(0.5))
      
      # Pan to follow a path
      self.play(self.camera.frame.animate.move_to(path.get_end()))
      ```
    - ‚ùå WRONG - Never use absolute coordinates:
      ```python
      self.camera.frame.move_to([-2, -1, 0])  # NO!
      camera_location = [1, 1, 0]             # NO!
      self.play(self.camera.frame.animate.move_to(camera_location))  # NO!
      ```

4. **Animation Methods & Object Lifecycle Management**:
    - Define clear animation sequences using documented methods such as `Create`, `Write`, `FadeIn`, `Transform`, and corresponding removal animations (`FadeOut`, `Uncreate`). Include animation methods from plugins if they are used.
    - For each animation, specify parameters like `run_time`, `lag_ratio`, and the use of `Wait()` for transition buffers.
    - Ensure every object's appearance and removal is managed to prevent clutter and maintain scene clarity.
    
5. **Code Structure & Reusability**:
    - Propose modular functions for creating and animating common objects to promote code reusability.
    - Organize the overall code structure into logical sections: dependencies, object definitions, individual layout stages, and the main `construct` method.
    - Include inline comments to document the rationale for configuration choices, referencing the Manim Documentation *and the plugin documentation where applicable*.
    
***Mandatory Safety Checks***:
    - **Safe Area Enforcement**: All objects, including text bounding boxes, must remain within 0.5 unit margins.
    - **Minimum Spacing Validation**: Confirm a minimum of 0.3 units spacing between every pair of objects.
    - **Transition Buffers**: Use explicit `Wait()` calls to separate animation steps and sub-scenes.
</SCENE_TECHNICAL_IMPLEMENTATION_PLAN>
```
