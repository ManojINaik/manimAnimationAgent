<CODE>
```python
from manim import *
from manim import config as global_config
from manim_voiceover import VoiceoverScene
from src.utils.elevenlabs_voiceover import get_speech_service # You MUST import like this as this is our custom voiceover service.

# plugins imports, don't change the import statements
# Note: The following plugin imports are commented out due to Python 3.13 compatibility issues
# Uncomment and install individually if needed and compatible with your Python version
# from manim_circuit import *
# from manim_physics import *
# from manim_chemistry import *
# from manim_dsa import *
# from manim_ml import *

# Helper Functions/Classes
class Scene2_Helper:
    # Helper class containing utility functions for scene 2.
    def __init__(self, scene):
        self.scene = scene

    def create_formula_tex(self, formula_str, color):
        # Creates a MathTex formula with a specified color.
        formula = MathTex(formula_str, color=color, font_size=24)
        return formula

    def create_soil(self):
        # Creates the soil rectangle.
        soil = Rectangle(width=2.0, height=1.0, fill_color="#8B4513", fill_opacity=0.8, stroke_color=BLACK)
        return soil

    def create_root_system(self, soil):
        # Creates the root system as a VGroup of lines.
        root_line_1 = Line(start=soil.get_edge(UP) + LEFT*0.3, end=soil.get_edge(UP) + UP*1.5 + LEFT*0.5, stroke_color=WHITE, stroke_width=2)
        root_line_2 = Line(start=soil.get_edge(UP), end=soil.get_edge(UP) + UP*1.8, stroke_color=WHITE, stroke_width=2)
        root_line_3 = Line(start=soil.get_edge(UP) + RIGHT*0.3, end=soil.get_edge(UP) + UP*1.5 + RIGHT*0.5, stroke_color=WHITE, stroke_width=2)
        root_system = VGroup(root_line_1, root_line_2, root_line_3)
        return root_system

    def create_water_arrows(self, soil, root_line_2):
        # Creates the water absorption arrows.
        water_arrows = VGroup()
        for i in range(3):
            arrow = Arrow(start=soil.get_edge(UP) + DOWN*0.1 + LEFT*0.4 + RIGHT*(i*0.4), end=root_line_2.get_start() + DOWN*0.2 + LEFT*0.1, color=BLUE)
            water_arrows.add(arrow)
        return water_arrows

    def create_leaf(self):
        # Creates a leaf polygon.
        leaf = Polygon([0, 0, 0], [1, 2, 0], [2, 0, 0], fill_color=GREEN, fill_opacity=0.7, stroke_color=BLACK)
        return leaf

    def create_stomata(self, leaf):
        # Creates stomata circles on the leaf.
        stomata_1 = Circle(radius=0.05, fill_color=WHITE, fill_opacity=1.0, stroke_color=BLACK)
        stomata_1.next_to(leaf, UP + RIGHT, buff=0.5)

        stomata_2 = Circle(radius=0.05, fill_color=WHITE, fill_opacity=1.0, stroke_color=BLACK)
        stomata_2.next_to(leaf, DOWN + LEFT, buff=0.5)

        return VGroup(stomata_1, stomata_2)

    def create_co2_arrows(self, stomata_1, stomata_2):
        # Creates the carbon dioxide intake arrows.
        co2_arrows = VGroup()
        arrow1 = Arrow(start=stomata_1.get_center() + UP*0.5 + RIGHT*0.3, end=stomata_1.get_center(), color=RED)
        arrow2 = Arrow(start=stomata_2.get_center() + DOWN*0.5 + LEFT*0.3, end=stomata_2.get_center(), color=RED)
        co2_arrows.add(arrow1, arrow2)
        return co2_arrows

    def create_sun(self, leaf):
        # Creates the sun circle.
        sun = Circle(radius=0.7, fill_color=YELLOW, fill_opacity=1.0, stroke_color=BLACK)
        sun.next_to(leaf, UP, buff=2)
        return sun

    def create_sunlight_arrows(self, sun, leaf):
        # Creates the sunlight absorption arrows.
        sunlight_arrows = VGroup()
        arrow1 = Arrow(start=sun.get_edge(DOWN), end=leaf.get_edge(UP) + UP*0.1, color=YELLOW)
        sunlight_arrows.add(arrow1)
        return sunlight_arrows

    def create_ingredients_text(self):
        # Creates the "Ingredients for Photosynthesis" text.
        ingredients_text = Tex("Ingredients for Photosynthesis", color=WHITE, font_size=28)
        return ingredients_text


class Scene2(VoiceoverScene, MovingCameraScene):
    def construct(self):
        # Initialize speech service
        self.set_speech_service(get_speech_service())

        # Instantiate helper class
        helper = Scene2_Helper(self)

        # --- Sub-scene 1: Water Absorption ---
        with self.voiceover(text="Welcome back! Building on our introduction to photosynthesis, let's explore the essential ingredients this amazing process needs.") as tracker:
            soil = helper.create_soil()
            soil.to_corner(DL).shift(UP*0.5 + RIGHT*0.5)
            self.play(Create(soil), run_time=tracker.duration)
            # Constraint check: Soil is within safe area.

        with self.voiceover(text="Think of photosynthesis like a recipe. What are the key ingredients a plant requires to make its own food?") as tracker:
            root_system = helper.create_root_system(soil)
            root_system.next_to(soil, UP, buff=0.3)
            self.play(Create(root_system), run_time=tracker.duration)
            # Constraint check: Root system is within safe area and has 0.3 unit spacing from soil.

        with self.voiceover(text="First, we have water. Plants absorb water through their roots, drawing it up from the soil.") as tracker:
            water_arrows = helper.create_water_arrows(soil, root_system[1]) # Using root_system[1] as representative root line
            self.play(Create(water_arrows), run_time=1.5*tracker.duration)
            # Constraint check: Water arrows are within safe area and have 0.3 unit spacing.

        with self.voiceover(text="Here, we see water moving from the soil, up into the root system. And, of course, water is H2O.") as tracker:
            water_formula = helper.create_formula_tex("H_2O", BLUE)
            water_formula.next_to(root_system, UP, buff=0.3)
            self.play(Write(water_formula), run_time=1*tracker.duration)
            # Constraint check: Water formula is within safe area and has 0.3 unit spacing from root system.
        self.wait(1)

        # --- Sub-scene 2: Carbon Dioxide Intake ---
        with self.voiceover(text="Next, carbon dioxide. This gas enters the plant through tiny openings on the leaves called stomata.") as tracker:
            leaf_1 = helper.create_leaf()
            leaf_1.move_to(ORIGIN).shift(LEFT*1.5)
            self.play(Create(leaf_1), run_time=tracker.duration)
            # Constraint check: Leaf is within safe area.

        with self.voiceover(text="The leaves essentially breathe in carbon dioxide from the air.") as tracker:
            stomata = helper.create_stomata(leaf_1)
            self.play(Create(stomata[0]), Create(stomata[1]), run_time=0.75*tracker.duration)
            # Constraint check: Stomata are within safe area and have 0.3 unit spacing from each other.

        with self.voiceover(text="The leaves essentially breathe in carbon dioxide from the air. Carbon dioxide is represented as CO2.") as tracker:
            co2_arrows = helper.create_co2_arrows(stomata[0], stomata[1])
            self.play(Create(co2_arrows), run_time=1.5*tracker.duration)
            # Constraint check: CO2 arrows are within safe area and have 0.3 unit spacing.

        with self.voiceover(text="The leaves essentially breathe in carbon dioxide from the air. Carbon dioxide is represented as CO2.") as tracker:
            co2_formula = helper.create_formula_tex("CO_2", RED)
            co2_formula.next_to(leaf_1, UP, buff=0.3)
            self.play(Write(co2_formula), run_time=1*tracker.duration)
            # Constraint check: CO2 formula is within safe area and has 0.3 unit spacing from leaf.
        self.wait(1)

        # --- Sub-scene 3: Sunlight Absorption ---
        with self.voiceover(text="And finally, sunlight! The leaves capture the energy from sunlight.") as tracker:
            leaf_2 = helper.create_leaf()
            leaf_2.to_corner(UR).shift(DOWN*1.5 + LEFT*0.5)
            self.play(Create(leaf_2), run_time=tracker.duration)
            # Constraint check: Leaf is within safe area.

        with self.voiceover(text="Just like solar panels, leaves are designed to absorb light.") as tracker:
            sun = helper.create_sun(leaf_2)
            self.play(Create(sun), run_time=tracker.duration)
            # Constraint check: Sun is within safe area.

        with self.voiceover(text="Just like solar panels, leaves are designed to absorb light. We can represent sunlight as h\\nu, a symbol for light energy.") as tracker:
            sunlight_arrows = helper.create_sunlight_arrows(sun, leaf_2)
            self.play(Create(sunlight_arrows), run_time=1.5*tracker.duration)
            # Constraint check: Sunlight arrows are within safe area and have 0.3 unit spacing.

        with self.voiceover(text="Just like solar panels, leaves are designed to absorb light. We can represent sunlight as h\\nu, a symbol for light energy.") as tracker:
            sunlight_formula = helper.create_formula_tex("h\\nu", YELLOW)
            sunlight_formula.next_to(sun, UP, buff=0.3)
            self.play(Write(sunlight_formula), run_time=1*tracker.duration)
            # Constraint check: Sunlight formula is within safe area and has 0.3 unit spacing from sun.
        self.wait(1)

        # --- Sub-scene 4: Emphasize Ingredients ---
        with self.voiceover(text="So, we have water, carbon dioxide, and sunlight. These are the key ingredients for photosynthesis!") as tracker:
            ingredients_text = helper.create_ingredients_text()
            ingredients_text.to_edge(UP, buff=0.5)
            self.play(Write(ingredients_text), run_time=2*tracker.duration)
            # Constraint check: Ingredients text is within safe area.
        self.wait(2)

        with self.voiceover(text="In the next scene, we will dive into how the plant uses these components to create energy. Stay tuned!") as tracker:
            self.play(FadeOut(ingredients_text), run_time=1*tracker.duration)
        self.wait(1)
```
</CODE>